// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: db_models.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Passenger {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: Int64 = 0

  var isValidated: Bool = false

  var balance: Double = 0

  var fidCard: Int64 = 0

  var registerDate: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Transport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Trace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cost: Double = 0

  var traceID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Driver {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var driverID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: Int64 = 0

  var sessionID: Int64 = 0

  var value: Double = 0

  var time: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DriveSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: Int64 = 0

  var driverID: Int64 = 0

  var transportID: Int64 = 0

  var startTime: UInt32 = 0

  var endTime: UInt32 = 0

  var isContinues: Bool = false

  var traceID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Passenger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Passenger"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    3: .standard(proto: "is_validated"),
    4: .same(proto: "balance"),
    5: .standard(proto: "fid_card"),
    6: .standard(proto: "register_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.clientID)
      case 3: try decoder.decodeSingularBoolField(value: &self.isValidated)
      case 4: try decoder.decodeSingularDoubleField(value: &self.balance)
      case 5: try decoder.decodeSingularInt64Field(value: &self.fidCard)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.registerDate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularInt64Field(value: self.clientID, fieldNumber: 1)
    }
    if self.isValidated != false {
      try visitor.visitSingularBoolField(value: self.isValidated, fieldNumber: 3)
    }
    if self.balance != 0 {
      try visitor.visitSingularDoubleField(value: self.balance, fieldNumber: 4)
    }
    if self.fidCard != 0 {
      try visitor.visitSingularInt64Field(value: self.fidCard, fieldNumber: 5)
    }
    if self.registerDate != 0 {
      try visitor.visitSingularUInt32Field(value: self.registerDate, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Passenger, rhs: Passenger) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.isValidated != rhs.isValidated {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.fidCard != rhs.fidCard {return false}
    if lhs.registerDate != rhs.registerDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Transport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tr_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.trID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trID != 0 {
      try visitor.visitSingularInt64Field(value: self.trID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transport, rhs: Transport) -> Bool {
    if lhs.trID != rhs.trID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Trace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cost"),
    2: .standard(proto: "trace_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.cost)
      case 2: try decoder.decodeSingularInt64Field(value: &self.traceID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cost != 0 {
      try visitor.visitSingularDoubleField(value: self.cost, fieldNumber: 1)
    }
    if self.traceID != 0 {
      try visitor.visitSingularInt64Field(value: self.traceID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trace, rhs: Trace) -> Bool {
    if lhs.cost != rhs.cost {return false}
    if lhs.traceID != rhs.traceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Driver: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Driver"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "driver_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularInt64Field(value: &self.driverID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.driverID != 0 {
      try visitor.visitSingularInt64Field(value: self.driverID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Driver, rhs: Driver) -> Bool {
    if lhs.driverID != rhs.driverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Transaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "session_id"),
    3: .same(proto: "value"),
    4: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.clientID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.sessionID)
      case 3: try decoder.decodeSingularDoubleField(value: &self.value)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularInt64Field(value: self.clientID, fieldNumber: 1)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularInt64Field(value: self.sessionID, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 3)
    }
    if self.time != 0 {
      try visitor.visitSingularUInt32Field(value: self.time, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Transaction, rhs: Transaction) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DriveSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DriveSession"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
    2: .standard(proto: "driver_id"),
    3: .standard(proto: "transport_id"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    6: .standard(proto: "is_continues"),
    7: .standard(proto: "trace_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.sessionID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.driverID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.transportID)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.startTime)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.endTime)
      case 6: try decoder.decodeSingularBoolField(value: &self.isContinues)
      case 7: try decoder.decodeSingularInt64Field(value: &self.traceID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sessionID != 0 {
      try visitor.visitSingularInt64Field(value: self.sessionID, fieldNumber: 1)
    }
    if self.driverID != 0 {
      try visitor.visitSingularInt64Field(value: self.driverID, fieldNumber: 2)
    }
    if self.transportID != 0 {
      try visitor.visitSingularInt64Field(value: self.transportID, fieldNumber: 3)
    }
    if self.startTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.startTime, fieldNumber: 4)
    }
    if self.endTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.endTime, fieldNumber: 5)
    }
    if self.isContinues != false {
      try visitor.visitSingularBoolField(value: self.isContinues, fieldNumber: 6)
    }
    if self.traceID != 0 {
      try visitor.visitSingularInt64Field(value: self.traceID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DriveSession, rhs: DriveSession) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.driverID != rhs.driverID {return false}
    if lhs.transportID != rhs.transportID {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.isContinues != rhs.isContinues {return false}
    if lhs.traceID != rhs.traceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
